#!/usr/bin/env python

import os
import subprocess

Import("env")
Import("env_modules")

# Create a copy of the module environment
env_webview = env_modules.Clone()

# Check if webview submodule is initialized
webview_path = os.path.join(Dir(".").srcnode().abspath, "webview")
webview_header = os.path.join(webview_path, "core", "include", "webview", "webview.h")

if not os.path.exists(webview_header):
    print("WebView submodule not found. Please initialize it with:")
    print("git submodule update --init --recursive")
    Return()

print("Found WebView library at:", webview_path)

# Add include paths
env_webview.Append(CPPPATH=[
    os.path.join(webview_path, "core", "include"),
])

# Build webview as static library
env_webview.Append(CPPDEFINES=["WEBVIEW_STATIC"])

# Configure exception handling:
# - Keep exceptions disabled for our module code (to match Godot)
# - Enable exceptions for webview library (it requires them internally)

# Create separate environment for webview library with exceptions enabled
env_webview_lib = env_webview.Clone()

# Remove any existing exception-disabling flags from webview library environment
if env["platform"] != "windows":
    # Remove -fno-exceptions if present and add -fexceptions
    cxxflags = env_webview_lib.get("CXXFLAGS", [])
    if "-fno-exceptions" in cxxflags:
        cxxflags.remove("-fno-exceptions")
    env_webview_lib.Replace(CXXFLAGS=cxxflags)
    env_webview_lib.Append(CXXFLAGS=["-fexceptions"])
else:
    if env.get("use_mingw", False):
        # MinGW: Remove -fno-exceptions and add -fexceptions
        cxxflags = env_webview_lib.get("CXXFLAGS", [])
        if "-fno-exceptions" in cxxflags:
            cxxflags.remove("-fno-exceptions")
        env_webview_lib.Replace(CXXFLAGS=cxxflags)
        env_webview_lib.Append(CXXFLAGS=["-fexceptions"])
    else:
        # MSVC: Enable exceptions
        env_webview_lib.Append(CXXFLAGS=["/EHsc"])

# Keep exceptions disabled for our module code (to match Godot)
if env["platform"] != "windows":
    env_webview.Append(CXXFLAGS=["-fno-exceptions"])
else:
    if env.get("use_mingw", False):
        env_webview.Append(CXXFLAGS=["-fno-exceptions"])
    else:
        env_webview.Append(CXXFLAGS=["/EHs-c-"])  # Disable exceptions in MSVC

# Platform-specific configuration
if env["platform"] == "windows":
    # Windows: Uses WebView2
    env_webview.Append(LIBS=["ole32", "oleaut32", "user32", "gdi32"])
    env_webview.Append(CPPDEFINES=["WEBVIEW_EDGE"])
    
elif env["platform"] == "macos":
    # macOS: Uses WebKit - following webview documentation
    # Documentation: c++ main.cc -O2 --std=c++11 -Ilibs -framework WebKit -ldl -o example
    print("WebView: Configuring macOS build with WebKit framework and dl library")
    
    # Add frameworks and libraries for both environments
    frameworks = ["WebKit", "Cocoa"]
    libs = ["dl"]
    
    env_webview.Append(FRAMEWORKS=frameworks)
    env_webview.Append(LIBS=libs)
    env_webview.Append(CPPDEFINES=["WEBVIEW_COCOA"])
    
    # Ensure webview library environment has the same
    env_webview_lib.Append(FRAMEWORKS=frameworks)
    env_webview_lib.Append(LIBS=libs)
    env_webview_lib.Append(CPPDEFINES=["WEBVIEW_COCOA"])
    
    print("WebView: Added frameworks:", frameworks)
    print("WebView: Added libraries:", libs)
    
elif env["platform"] == "linuxbsd":
    # Linux: Uses WebKitGTK
    env_webview.Append(CPPDEFINES=["WEBVIEW_GTK"])
    
    # Check for required packages
    try:
        # Try GTK4 and WebKitGTK 6.0 first
        subprocess.check_output(["pkg-config", "--exists", "gtk4"], stderr=subprocess.STDOUT)
        subprocess.check_output(["pkg-config", "--exists", "webkitgtk-6.0"], stderr=subprocess.STDOUT)
        env_webview.ParseConfig("pkg-config --cflags --libs gtk4 webkitgtk-6.0")
        print("Found GTK4 and WebKitGTK 6.0")
    except:
        try:
            # Fallback to GTK3 and WebKitGTK 4.1/4.0
            subprocess.check_output(["pkg-config", "--exists", "gtk+-3.0"], stderr=subprocess.STDOUT)
            try:
                subprocess.check_output(["pkg-config", "--exists", "webkit2gtk-4.1"], stderr=subprocess.STDOUT)
                env_webview.ParseConfig("pkg-config --cflags --libs gtk+-3.0 webkit2gtk-4.1")
                print("Found GTK3 and WebKitGTK 4.1")
            except:
                subprocess.check_output(["pkg-config", "--exists", "webkit2gtk-4.0"], stderr=subprocess.STDOUT)
                env_webview.ParseConfig("pkg-config --cflags --libs gtk+-3.0 webkit2gtk-4.0")
                print("Found GTK3 and WebKitGTK 4.0")
        except:
            print("Warning: Could not find required GTK/WebKit packages.")
            print("Install with: sudo apt-get install libgtk-3-dev libwebkit2gtk-4.0-dev")
            print("Or: sudo apt-get install libgtk-4-dev libwebkitgtk-6.0-dev")

# Collect WebView source files
webview_sources = []

# Add the main webview source file for static build
webview_src_file = os.path.join(webview_path, "core", "src", "webview.cc")
if os.path.exists(webview_src_file):
    webview_sources.append(webview_src_file)
    print(f"Added webview source: {webview_src_file}")

# Add our module sources
module_sources = [
    "register_types.cpp",
    "webview_node.cpp"
]

# Build the module (our code with exceptions disabled)
env_webview.add_source_files(env.modules_sources, module_sources)

# Add webview sources with exceptions enabled
if webview_sources:
    env_webview_lib.add_source_files(env.modules_sources, webview_sources)

print("WebView module configuration complete")
